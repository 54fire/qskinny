/*!
    \headerfile QskQuickItem.h
    \brief what a quick item
 */

class QskQuickItem
{
  public:

    /*!
        \enum Flag

        QQuick classes have a tendency to update items too early
        and too often. To avoid processing of unwanted operations
        QskControl implements a couple of modifications, that
        can be en/disabled individually.

        The default setting enables all attributes.

        \var DeferredUpdate

            Creating of paint nodes is blocked for all invisible nodes
            ( QQuickItem::isVisible() ).

            \note Some more advanced algorithms have not yet been implemented,
                  such as viewport frustrum culling (i.e. hiding items outside of the
                  window geometry).

            \var DeferredPolish

                Calculation of layouts ( updateLayout() ) is blocked for all invisible
                nodes ( QQuickItem::isVisible() ).

            \var DeferredLayout

                Updates of the implicit size is blocked until effectiveConstraint() or sizeHint()
                is explicitly called. When being enabled the implicit size is not recalculated before
                being requested - usually by a QskLayout.

            \var CleanupOnVisibility

                Delete scene graph nodes, when the item becomes hidden ( QQuickItem::isVisible() ).
                Enabling this mode will reduce the memory footprint, but comes at the cost
                of having to recreate nodes later.

            \var PreferRasterForTextures

                When creating textures from QskGraphic, prefer the raster paint
                engine over the OpenGL paint engine.

            \var DebugForceBackground

                Always fill the background of thecontrol with a random color.
                \note This flag is useful when analyzing layouts.
    */

    /*!
        \fn void setControlFlag( Flag, bool on = true );
    */  
    
    /*! 
        \fn void resetControlFlag( Flag );
    */  
    
    /*! 
        \fn bool testControlFlag( Flag ) const;
    */
